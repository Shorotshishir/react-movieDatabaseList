{"version":3,"sources":["component/MovieRows.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieRow","react_default","a","createElement","Fragment","key","this","props","movie","id","src","poster_src","alt","title","overview","type","value","href","target_","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","performSearch","state","searchTerm","_this2","console","log","url","urlString","$","ajax","success","searchResults","results","movieRows","forEach","undefined","poster_path","movieRow","MovieRows_MovieRow","push","setState","rows","event","target","defaultList","className","width","placeholder","onChange","searchChangeHandler","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAEqBA,mLAEjB,OAEEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KAEEH,EAAAC,EAAAC,cAAA,SAAOE,IAAKC,KAAKC,MAAMC,MAAMC,IACzBR,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIE,IAAKC,KAAKC,MAAMC,MAAMC,IAEtBR,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKO,IAAKJ,KAAKC,MAAMC,MAAMG,WAAYC,IAAI,YAC/CX,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMC,MAAMK,OACrBZ,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMC,MAAMM,UACrBb,EAAAC,EAAAC,cAAA,SAAOY,KAAK,SAASC,MAAM,OAAOC,KAAK,aAAaC,QAAQ,sBAd5CC,aC2GvBC,cAlGb,SAAAA,EAAYb,GAAM,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KACDoB,gBACLN,EAAKO,MAAQ,GAHGP,6EAUJQ,GAAW,IAAAC,EAAAxB,KACvByB,QAAQC,IAAI,oBACZ,IAEIC,EAAI,GAES,KAAbJ,EACFE,QAAQC,IAAI,2BAEZC,EAAIC,6FAAqBL,EAG3BM,IAAEC,KAAK,CACLH,IAAIA,EACJI,QAAQ,SAACC,GACP,IAAMC,EAAUD,EAAcC,QAC1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAAAjC,QACakC,IAArBlC,EAAMmC,YACNnC,EAAMG,WAAY,GAElBH,EAAMG,WAAY,kCAAmCH,EAAMmC,YAG/D,IAAMC,EAAW3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAUxC,IAAKG,EAAMC,GAAID,MAAOA,IAEnDgC,EAAUM,KAAKF,KAEjBd,EAAKiB,SAAS,CAACC,KAAMR,0FAqBPS,GAClBlB,QAAQC,IAAIiB,EAAMC,OAAOlC,OACzB,IAAMa,EAAaoB,EAAMC,OAAOlC,MAC5Ba,EACAvB,KAAKqB,cAAcE,GAEnBvB,KAAK6C,+CAST,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,eACfnD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKkD,MAAM,KAAK3C,IAAI,gBAAgBE,IAAI,UAE1CX,EAAAC,EAAAC,cAAA,MAAIkD,MAAM,MACVpD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,iCAIZF,EAAAC,EAAAC,cAAA,SAAOiD,UAAU,YAAYrC,KAAK,OAAOuC,YAAY,sBACrDC,SAAUjD,KAAKkD,oBAAoBC,KAAKnD,QAEvCA,KAAKsB,MAAMoB,aAjGA7B,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.748a1abf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class MovieRow extends Component {\r\n  render() {\r\n    return (\r\n      \r\n      <React.Fragment>\r\n        \r\n        <table key={this.props.movie.id}>\r\n            <tbody>\r\n                <tr key={this.props.movie.id}>\r\n                  {/* <td>for christ sake show me something !!!!</td> */}\r\n                    <td><img src={this.props.movie.poster_src} alt=\"poster\"/></td>\r\n                    <td>\r\n                      <p>{this.props.movie.title}</p>\r\n                      <p>{this.props.movie.overview}</p>\r\n                      <input type=\"button\" value=\"View\" href='google.com' target_='blank'/>\r\n                    </td>\r\n                    \r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n      </React.Fragment>\r\n\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport $ from 'jquery'\r\nimport MovieRow from './component/MovieRows'\r\n\r\nclass App extends Component {\r\n  /**\r\n   * @param  {} props\r\n   * @param  {} {super(props\r\n   * @param  {} this.performSearch(\r\n   */\r\n  constructor(props){\r\n    super(props)\r\n    this.performSearch()\r\n    this.state = {}\r\n  }\r\n  /**\r\n   * @param  {} searchTerm\r\n   * @param  {} {console.log('SearchwithTMDB'\r\n   * @param  {leturl=''if(searchTerm===''} constapi_key='e636871c32d8612f210710f411a807df'consturlString='https\r\n   */\r\n  performSearch(searchTerm){\r\n    console.log('Search with TMDB')\r\n    const api_key= 'e636871c32d8612f210710f411a807df'\r\n    const urlString='https://api.themoviedb.org/4/search/movie?api_key='+api_key\r\n    let url=''\r\n    // const api_key= ''\r\n    if (searchTerm==='') {\r\n      console.log('type in the search term')\r\n    } else {\r\n      url=urlString+'&&query='+searchTerm\r\n    }\r\n\r\n    $.ajax({\r\n      url:url,\r\n      success:(searchResults)=>{\r\n        const results = searchResults.results\r\n        let movieRows = []\r\n        \r\n        results.forEach(movie => {\r\n            if (movie.poster_path ===undefined) {\r\n                movie.poster_src =''\r\n            } else {\r\n                movie.poster_src ='https://image.tmdb.org/t/p/w185'+ movie.poster_path\r\n            }\r\n            \r\n            const movieRow = <MovieRow key={movie.id} movie={movie}/>\r\n        //   console.log(movieRow)\r\n          movieRows.push(movieRow)\r\n        });\r\n        this.setState({rows: movieRows})\r\n        // console.log({movieRows})\r\n      },\r\n    //   error:(xhr, status, err)=>{\r\n    //     console.error(\"data fetch failed ! ! ! \")\r\n    //   }\r\n    })\r\n  }\r\n\r\n  defaultList(){\r\n    // const api_key= 'e636871c32d8612f210710f411a807df'\r\n    // const urlString='https://api.themoviedb.org/4/list/1?page=1&api_key='+api_key\r\n    // let url=''\r\n  }\r\n  /**\r\n   * @param  {} event\r\n   * @param  {} {console.log(event.target.value\r\n   * @param  {} constsearchTerm=event.target.valueif(searchTerm\r\n   * @param  {} {this.performSearch(searchTerm\r\n   * @param  {} }else{this.defaultList(\r\n   */\r\n  searchChangeHandler(event){\r\n    console.log(event.target.value)\r\n    const searchTerm = event.target.value\r\n    if (searchTerm) {\r\n        this.performSearch(searchTerm)\r\n    } else {\r\n        this.defaultList()\r\n    }\r\n    \r\n  }\r\n  /**\r\n   * @param  {} {return(<div><tableclassName='tableNavbar'><tbody><tr><td><imgwidth='50'src=\"tmdb_logo.svg\"alt=\"tmdb\"/></td><tdwidth='8'></td><td><h2>MoviesDBSearch</h2></td></tr></tbody></table><inputclassName='searchBar'type=\"text\"placeholder='providesearchterm'onChange={this.searchChangeHandler.bind(this\r\n   * @param  {} }/>{this.state.rows}</div>\r\n   */\r\n  render() {\r\n    return (\r\n      <div >\r\n        <table className='tableNavbar'>\r\n          <tbody>\r\n            <tr>\r\n              <td >\r\n                <img width='50' src=\"tmdb_logo.svg\" alt=\"tmdb\"/>\r\n              </td>\r\n              <td width='8'></td>\r\n              <td><h2>MoviesDB Search</h2></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      <input className='searchBar' type=\"text\" placeholder='provide search term'\r\n      onChange={this.searchChangeHandler.bind(this)}\r\n      />\r\n      {this.state.rows}\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}